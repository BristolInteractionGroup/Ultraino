/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package acousticfield3d.gui.panels;

import acousticfield3d.gui.MainForm;
import acousticfield3d.math.M;
import acousticfield3d.math.Vector3f;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.MeshEntity;
import acousticfield3d.scene.Resources;
import acousticfield3d.scene.Scene;
import acousticfield3d.simulation.ControlPoint;
import acousticfield3d.simulation.Transducer;
import acousticfield3d.utils.Color;
import acousticfield3d.utils.Parse;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Asier
 */
public class ControlPointPanel extends javax.swing.JPanel {
    public MainForm mf;
    final ArrayList<MeshEntity> groundLines = new ArrayList<>();
    
    public ControlPointPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        cpEnableCheck = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        cpSizeText = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        cpColorText = new javax.swing.JTextField();
        cpAddButton = new javax.swing.JButton();
        cpDelButton = new javax.swing.JButton();
        placeBeadAtSliceCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        numberText = new javax.swing.JTextField();
        allVisibleButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        onlyVisibleButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        mirrorAddButton = new javax.swing.JButton();
        gridWText = new javax.swing.JTextField();
        gridHText = new javax.swing.JTextField();
        gridAddButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        groundLineCheck = new javax.swing.JCheckBox();
        lineThicknessText = new javax.swing.JTextField();

        jButton3.setText("jButton3");

        cpEnableCheck.setText("enable");
        cpEnableCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpEnableCheckActionPerformed(evt);
            }
        });

        jLabel41.setText("size:");

        cpSizeText.setText("0.0015");
        cpSizeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpSizeTextActionPerformed(evt);
            }
        });

        jLabel43.setText("Color:");

        cpColorText.setText("255,255,255,255");
        cpColorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpColorTextActionPerformed(evt);
            }
        });

        cpAddButton.setText("Add");
        cpAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpAddButtonActionPerformed(evt);
            }
        });

        cpDelButton.setText("Del");
        cpDelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpDelButtonActionPerformed(evt);
            }
        });

        placeBeadAtSliceCheck.setText("PlaceBeadAtSlice");

        jLabel1.setText("Number:");

        numberText.setText("0");

        allVisibleButton.setText("All");
        allVisibleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allVisibleButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Visible:");

        onlyVisibleButton.setText("O");
        onlyVisibleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyVisibleButtonActionPerformed(evt);
            }
        });

        selectAllButton.setText("S A");
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        jButton1.setText("TrapFollow");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("NoTrap");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        mirrorAddButton.setText("MirrorAdd");
        mirrorAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorAddButtonActionPerformed(evt);
            }
        });

        gridWText.setText("4");

        gridHText.setText("3");

        gridAddButton.setText("gridAdd");
        gridAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridAddButtonActionPerformed(evt);
            }
        });

        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        groundLineCheck.setText("groundLine");
        groundLineCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groundLineCheckActionPerformed(evt);
            }
        });

        lineThicknessText.setText("0.00025");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cpEnableCheck)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpSizeText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addGap(7, 7, 7)
                        .addComponent(cpColorText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gridWText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridHText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridAddButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mirrorAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(groundLineCheck)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lineThicknessText))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(allVisibleButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(onlyVisibleButton))
                                .addComponent(placeBeadAtSliceCheck)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(selectAllButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(cpAddButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cpDelButton)))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpEnableCheck)
                    .addComponent(jLabel41)
                    .addComponent(cpSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(cpColorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(allVisibleButton)
                    .addComponent(onlyVisibleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectAllButton)
                        .addComponent(cpDelButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(placeBeadAtSliceCheck)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mirrorAddButton)
                    .addComponent(circleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridWText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridHText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridAddButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groundLineCheck)
                    .addComponent(lineThicknessText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public ControlPoint createControlPoint(float x, float y, float z, int frame, int number){
        ControlPoint me = new ControlPoint(Resources.MESH_SPHERE, null, Resources.SHADER_SOLID_SPEC);
        
        me.setTag( Entity.TAG_CONTROL_POINT );
        me.setFrame( frame );
        
        me.setColor( Color.parse( getControlPointColor() ) );
        me.getTransform().getScale().set( getControlPointSize() );
        me.getTransform().getTranslation().set(x, y, z);
        if (number == -1){
            number = getNumber();
        }
        me.setNumber( number );
        return me;
    }
    
     public ControlPoint addControlPoint(float x, float y, float z){
         return addControlPoint(x,y,z,getNumber(),0);
     }
    
    public ControlPoint addControlPoint(final Vector3f pos, int frame, int number){
        return addControlPoint(pos.x, pos.y, pos.z, frame, number);
    }
            
    public ControlPoint addControlPoint(float x, float y, float z, int frame, int number){
        ControlPoint me = createControlPoint(x, y, z, frame, number);
        mf.scene.getEntities().add( me );
        mf.simulation.getControlPoints().add(me);
       
        return me;
    }
    
    
    private void cpEnableCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpEnableCheckActionPerformed
        Scene.setVisible( mf.scene.getEntities(), Entity.TAG_CONTROL_POINT, cpEnableCheck.isSelected());
        mf.needUpdate();
    }//GEN-LAST:event_cpEnableCheckActionPerformed

    private void cpSizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpSizeTextActionPerformed
        final float size = getControlPointSize();
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT ){
                e.getTransform().getScale().set( size );
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_cpSizeTextActionPerformed

    private void cpColorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpColorTextActionPerformed
        final int color = Color.parse( getControlPointColor() );
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT && (e instanceof MeshEntity)){
                MeshEntity me = (MeshEntity)e;
                me.setColor( color );
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_cpColorTextActionPerformed

    private void cpAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpAddButtonActionPerformed
        Vector3f sCenter = mf.simulation.getSimulationCenter();
        addControlPoint (sCenter.x, sCenter.y, sCenter.z, getNumber(), 0);
        mf.needUpdate();
    }//GEN-LAST:event_cpAddButtonActionPerformed

    public boolean isClickAndPlace(){
        return placeBeadAtSliceCheck.isSelected();
    }
    
    private void cpDelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpDelButtonActionPerformed
        //Remove from simulation and scene
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_CONTROL_POINT){
                mf.scene.getEntities().remove( e );
                mf.simulation.controlPoints.remove( e );
            }
        }
        mf.clearSelection();
        mf.needUpdate();
    }//GEN-LAST:event_cpDelButtonActionPerformed

    private void allVisibleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allVisibleButtonActionPerformed
        Scene.setVisible( mf.scene.getEntities() , Entity.TAG_CONTROL_POINT, true);
    }//GEN-LAST:event_allVisibleButtonActionPerformed

    private void onlyVisibleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyVisibleButtonActionPerformed
        setOnlyCurrentCPsVisible( getNumber() , -1);
        mf.needUpdate();
    }//GEN-LAST:event_onlyVisibleButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        selectAll();
        mf.needUpdate();
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final List<Entity> sel = mf.selection;
        for(Entity e : sel){
            if ( e instanceof ControlPoint){
                ControlPoint s = (ControlPoint)e;
                s.removeAutoTrap();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List<Transducer> trans ;
        
        if (mf.bag.isEmpty()){
            trans = mf.simulation.transducers;
        }else{
            trans = new ArrayList<>();
            for(Entity e : mf.bag){
                if (e instanceof Transducer){
                    trans.add( (Transducer) e);
                }
            }
        }
        
        
        
        final List<Entity> sel = mf.selection;
        
        for(Entity e : sel){
            if ( e instanceof ControlPoint){
                ControlPoint s = (ControlPoint)e;
                s.setTrap( mf.trapsPanel.getTrap() );
                s.setTrans( trans );
                s.setAutoTrap(true);
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void mirrorAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorAddButtonActionPerformed
        final Entity e = mf.movePanel.getBeadEntity();
        if( e == null){ return; }
        final Vector3f sCenter = mf.simulation.getSimulationCenter();
        final Vector3f pos = e.getTransform().getTranslation();
        
        final float dx = pos.x - sCenter.x;
        final float dz = pos.z - sCenter.z;
        final float px = sCenter.x + dx;
        final float nx = sCenter.x - dx;
        final float pz = sCenter.z + dz;
        final float nz = sCenter.z - dz;
        
        addControlPoint (px, pos.y, nz, getNumber(), 0);
        addControlPoint (nx, pos.y, pz, getNumber(), 0);
        addControlPoint (nx, pos.y, nz, getNumber(), 0);
        
        mf.needUpdate();
    }//GEN-LAST:event_mirrorAddButtonActionPerformed

    private void gridAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridAddButtonActionPerformed
        final int w = Parse.toInt( gridWText.getText() );
        final int h = Parse.toInt( gridHText.getText() );
        final Vector3f sCenter = mf.simulation.getSimulationCenter();
        final Vector3f simSize = mf.simulation.getSimulationSize();
       
        final float sepW = simSize.x / (w+1);
        final float sepH = simSize.z / (h+1);
        
        
        for( int ix = 0; ix < w; ++ix){
            for (int iy = 0; iy < h; ++iy){
                
                addControlPoint (
                        sCenter.x - simSize.x/2 + sepW + sepW*ix, 
                        sCenter.y, 
                        sCenter.z - simSize.z/2 + sepH + sepH*iy, 
                        getNumber(), 0);
            }
        }
       mf.needUpdate();
    }//GEN-LAST:event_gridAddButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        final ArrayList<MeshEntity> particles = mf.simulation.controlPoints;
        
        //get the center
        final Vector3f center = Scene.calcCenter( particles );
        //get average distance
        final float avgDist = Scene.averageDistance(center, particles);
        //arrange the particles in a circle
        int index = 0;
        final int n = particles.size();
        for (Entity e : particles){
            final Vector3f pos = e.getTransform().getTranslation();
            pos.x = center.x + M.cos( index * M.TWO_PI / n ) * avgDist;
            pos.z = center.z + M.sin( index * M.TWO_PI / n ) * avgDist;
            index++;
        }
        mf.needUpdate();
    }//GEN-LAST:event_circleButtonActionPerformed

    private void groundLineCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groundLineCheckActionPerformed
        if (groundLineCheck.isSelected()){
           final int nPoints = mf.simulation.controlPoints.size();
           for (int i = 0; i < nPoints; ++i){
               final MeshEntity line = new MeshEntity(Resources.MESH_BOX, null, Resources.SHADER_SOLID_SPEC);
               line.setTag( Entity.TAG_GROUND_LINE );
               groundLines.add(line);
               mf.scene.getEntities().add(line);
            }
            updateGroundLines();
            mf.needUpdate();
        }else{
            groundLines.clear();
            mf.scene.removeWithTag(Entity.TAG_GROUND_LINE );
            mf.needUpdate();
        }
    }//GEN-LAST:event_groundLineCheckActionPerformed


    public void updateGroundLines(){
        final int nLines =  groundLines.size();
        final int nPoints = mf.simulation.controlPoints.size();
        final int n = M.min(nLines, nPoints);
        final float thickness = Parse.toFloat( lineThicknessText.getText() );
        final float minY = mf.simulation.getBoundaryMin().y;
        
        final Vector3f tmp = new Vector3f();
        for (int i = 0; i < n; ++i){
            final Vector3f pos = mf.simulation.controlPoints.get(i).getTransform().getTranslation();
            final MeshEntity line = groundLines.get(i);
            tmp.set(pos).y = minY;
            
            line.getTransform().connectTwoPoints(pos, tmp, thickness);
        }
        
    }
    
    public boolean isGroundLineSelected(){
        return groundLineCheck.isSelected();
    }
    
    public void selectAll() {
        mf.clearSelection();
        for(MeshEntity me : mf.scene.getEntities()){
            if ( (me.getTag() & Entity.TAG_CONTROL_POINT) != 0){
                me.selected = true;
                mf.selection.add(me);
            }
        }
    }
    
    public Entity selectFrame(int frame) {
        mf.clearSelection();
        for(MeshEntity me : mf.scene.getEntities()){
            if ( (me.getTag() & Entity.TAG_CONTROL_POINT) != 0 &&
                    me.getFrame() == frame){
                me.selected = true;
                mf.selection.add(me);
            }
        }
        if (mf.selection.isEmpty()){
            return null;
        }else{
            return mf.selection.get(0);
        }
    }
    
    public void setOnlyCurrentCPsVisible(int frame, int number){
        Scene.setVisible( mf.scene.getEntities() , Entity.TAG_CONTROL_POINT, frame, number ,true);
    }
    
    public String getControlPointColor(){
        return cpColorText.getText();
    }
    
    public int getNumber(){
        return Parse.toInt( numberText.getText() );
    }
    
    public float getControlPointSize(){
        return Parse.toFloat( cpSizeText.getText() );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allVisibleButton;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton cpAddButton;
    private javax.swing.JTextField cpColorText;
    private javax.swing.JButton cpDelButton;
    private javax.swing.JCheckBox cpEnableCheck;
    private javax.swing.JTextField cpSizeText;
    private javax.swing.JButton gridAddButton;
    private javax.swing.JTextField gridHText;
    private javax.swing.JTextField gridWText;
    private javax.swing.JCheckBox groundLineCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JTextField lineThicknessText;
    private javax.swing.JButton mirrorAddButton;
    private javax.swing.JTextField numberText;
    private javax.swing.JButton onlyVisibleButton;
    private javax.swing.JCheckBox placeBeadAtSliceCheck;
    private javax.swing.JButton selectAllButton;
    // End of variables declaration//GEN-END:variables

    public void createPoints(int n) {
        final Vector3f sCenter = mf.simulation.getSimulationCenter();
        for (int i = 0; i < n; ++i) {
            addControlPoint(sCenter.x, sCenter.y, sCenter.z);
        }
    
    }

    public void deleteAllPoints() {
        mf.scene.getEntities().removeAll(mf.simulation.controlPoints);
        mf.simulation.controlPoints.clear();
    }

    public void addPoints(ArrayList<ControlPoint> allPoints) {
        mf.scene.getEntities().addAll( allPoints );
        mf.simulation.controlPoints.addAll( allPoints );
    }


    
}
